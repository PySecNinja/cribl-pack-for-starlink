const{httpSearch,isHttp200,RestVerb,HttpError,RestAuthType}=C.internal.HttpUtils;const{PrometheusParser}=C.internal.Parsers;const{DiscoveryAdapterFactory}=C.internal.Adapters;exports.name="Prometheus";exports.version="0.1";exports.disabled=false;exports.destroyable=false;exports.hidden=true;let conf;let batchSize;let dimensions;exports.getParser=e=>new PrometheusParser(e.logger(),dimensions);exports.init=async e=>{conf=e.conf;batchSize=conf.maxBatchSize||10;dimensions=conf.dimensionList;DiscoveryAdapterFactory.create(conf).validate()};exports.discover=async e=>{try{const t=await DiscoveryAdapterFactory.create(conf,e.logger()).discoverTargets(e)||[];const r=[];for(const s of t){s.format="raw";r.push(s);if(r.length>=batchSize){await e.addResults(r);r.length=0}}if(r.length)await e.addResults(r)}catch(t){e.logger().error("Discover error",{error:t});throw t}};exports.collect=async(e,t)=>{const{username:r,password:s,rejectUnauthorized:o}=conf;const a=r&&s?RestAuthType.BASIC:RestAuthType.NONE;const c={url:e.source,method:RestVerb.GET,authType:a,username:r,password:s,rejectUnauthorized:o};const n=await httpSearch(c,t.logger());n.res.on("end",(()=>{if(!isHttp200(n.res.statusCode)){const e=new HttpError("http error",n.res.statusCode,{host:n.host,port:n.port,path:n.path,method:n.method});t.reportError(e).catch((()=>{}))}}));n.res.on("error",(e=>{t.reportError(e).catch((()=>{}))}));return n.res};