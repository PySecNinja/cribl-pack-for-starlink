exports.name="Cribl Lake";exports.version="0.1";exports.disabled=false;exports.destroyable=false;const{CriblLakeCollector}=C.internal.Collectors;const collector=new CriblLakeCollector;exports.init=e=>{const o={path:e.conf.path,filter:e.conf.filter,bucket:e.conf.bucket,region:e.conf.region,awsAuthenticationMethod:e.conf.awsAuthenticationMethod,awsApiKey:e.conf.awsApiKey,awsSecretKey:e.conf.awsSecretKey,endpoint:e.conf.endpoint,enableAssumeRole:e.conf.enableAssumeRole??false,assumeRoleArn:e.conf.assumeRoleArn,recurse:true,signatureVersion:"v4",durationSeconds:3600,reuseConnections:true,rejectUnauthorized:true,verifyPermissions:true,parquetChunkSizeMB:5,parquetChunkDownloadTimeout:600,maxBatchSize:10};e.conf=o;const t=collector.init(e);exports.provider=collector.provider;return t};exports.discover=async e=>collector.discover(e);exports.collect=async(e,o)=>collector.collect(e,o);exports.close=async()=>{await collector.provider.close().catch((e=>{}))};