exports.name="OTLP Traces";exports.version="0.1";exports.disabled=false;exports.group="Formatters";exports.sync=true;exports.handleSignals=true;const cLogger=C.util.getLogger("func:otlp_traces");const{OTelTracesFormatter}=C.internal.otel;const statsInterval=6e4;let formatterConfig={};let otlpBatchConfig={};let tracesFormatter;let statsReportInterval;function resetStats(){tracesFormatter?.resetStats()}function reportStats(){const{numReceived:t,numNotTraces:e,numDropped:a,numBatches:r}=tracesFormatter.getStats();cLogger.debug("OTLP Traces events stats",{numReceived:t,numNotTraces:e,numDropped:a,numBatches:r});resetStats()}exports.init=t=>{const e=(t||{}).conf||{};formatterConfig={shouldDropNonTraceEvents:e.dropNonTraceEvents||false,otlpVersion:e.otlpVersion};otlpBatchConfig={enableOTLPMetricsBatching:e.batchOTLPTraces,sendBatchSize:e.sendBatchSize??8192,timeout:e.timeout??200,sendBatchMaxSize:C.util.parseMemoryStringToBytes(`${e.sendBatchMaxSize??0}KB`),metadataKeys:e.metadataKeys??[],metadataCardinalityLimit:e.metadataCardinalityLimit??1e3};if(otlpBatchConfig.metadataKeys.length>0&&otlpBatchConfig.metadataCardinalityLimit===0){cLogger.warn("Can't have unlimited cardinality, setting cardinality to 1000");otlpBatchConfig.metadataCardinalityLimit=1e3}tracesFormatter=new OTelTracesFormatter(cLogger,formatterConfig,otlpBatchConfig);resetStats();clearInterval(statsReportInterval);statsReportInterval=setInterval(reportStats,statsInterval)};exports.process=t=>{let e=[];if(t.__signalEvent__){if(otlpBatchConfig.enableOTLPMetricsBatching){e=tracesFormatter.output(t.__signalEvent__==="final")}e.push(t)}else{e=tracesFormatter.handleEvent(t)}return e.length===0?null:e.length===1?e[0]:e};exports.unload=()=>{tracesFormatter=undefined;clearInterval(statsReportInterval);statsReportInterval=undefined};exports.UT_getFormatter=()=>tracesFormatter;exports.UT_getStats=()=>{const{numReceived:t,numNotTraces:e,numDropped:a,numBatches:r}=tracesFormatter.getStats();return{numReceived:t,numNotTraces:e,numDropped:a,numBatches:r}};