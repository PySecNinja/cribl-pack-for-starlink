exports.name="Sampling";exports.version="0.2";exports.group="Standard";exports.sync=true;const{Expression}=C.expr;const cLogger=C.util.getLogger("func:sampling");const expressions=[];const sampleRates=[];const sampleIdx=[];exports.init=s=>{const{conf:e}=s;sampleRates.length=0;expressions.length=0;sampleIdx.length=0;(e.rules||[]).forEach((s=>{expressions.push(new Expression(`${s.filter}`,{disallowAssign:true}));sampleRates.push(s.rate);sampleIdx.push(Math.random()*s.rate|0)}));cLogger.info("initialized",{rules:e.rules||[]})};exports.process=s=>{for(let e=0;e<expressions.length;e++){if(expressions[e].evalOn(s)){const r=sampleRates[e];if(r<=1||sampleIdx[e]++>=r){sampleIdx[e]=1;s.sampled=r;return s}return null}}s.sampled=1;return s};