let arrayPath;let splunkPathPrefix;let objName;function extractArray(r){for(let t=0;t<arrayPath.length;t++){const e=arrayPath[t];const n=r[e];if(!n){return undefined}if(t===arrayPath.length-1){if(!Array.isArray(n)){return undefined}delete r[e];return n}r=n}return undefined}function prepareForCloning(r){delete r.__json;const t=Object.keys(r);for(let e=0;e<t.length;e++){if(t[e].startsWith(splunkPathPrefix)){delete r[t[e]]}}}exports.name="JSON Unroll";exports.version="0.1";exports.group="Advanced";exports.sync=true;exports.init=r=>{const t=r.conf||{};arrayPath=(t.path||"").split(".").map((r=>r.trim()));objName=(t.name||"").trim();splunkPathPrefix="";for(let r=0;r<arrayPath.length;r++){const t=arrayPath[r];if(Number.isNaN(+t)){splunkPathPrefix+=`.${t}`}else{splunkPathPrefix+="{}"}}if(splunkPathPrefix.length>0&&splunkPathPrefix.startsWith(".")){splunkPathPrefix=splunkPathPrefix.substr(1)}splunkPathPrefix+="{}"};exports.process=r=>{if(!r._raw)return r;try{if(!r.__json){r.__json=typeof r._raw==="string"?JSON.parse(r._raw):r._raw}const t=extractArray(r.__json);if(t){const e=r.__json;prepareForCloning(r);return t.map((t=>{if(typeof t!=="object"||objName){t={[objName||"value"]:t}}const n=r.__clone();n.__json=Object.assign({},e,t);n._raw=JSON.stringify(n.__json);return n}))}}catch(r){}return r};