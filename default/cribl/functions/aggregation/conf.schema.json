{
  "type": "object",
  "title": "",
  "required": ["timeWindow", "aggregations"],
  "properties": {
    "passthrough": {
      "type": "boolean",
      "title": "Passthrough mode",
      "description": "Determines whether or not to passthrough the original events along with the aggregate(s) events.",
      "default": false
    },
    "preserveGroupBys": {
      "type": "boolean",
      "title": "Preserve group by fields",
      "description": "Preserves the structure of the original aggregate(s) events groupby fields.",
      "default": false
    },
    "sufficientStatsOnly": {
      "type": "boolean",
      "title": "Sufficient stats mode",
      "description": "Determines whether or not to output only the sufficient statistics for the supplied aggregate(s).",
      "default": false
    },
    "metricsMode": {
      "type": "boolean",
      "title": "Metrics mode",
      "description": "Determines whether or not to output the aggregates as metrics or events",
      "default": false
    },
    "prefix": {
      "type": "string",
      "title": "Output prefix",
      "description": "A prefix that is prepended to all of the fields output by this aggregations function."
    },
    "timeWindow": {
      "pattern": "\\d+[sm]$",
      "type": "string",
      "title": "Time window",
      "description": "The time span of the tumbling window for aggregating events. Must be a valid time string (e.g., 10s).",
      "default": "10s"
    },
    "aggregations": {
      "type": "array",
      "title": "Aggregates",
      "description": "Aggregate function(s) to perform on events. E.g., sum(bytes).where(action=='REJECT').as(TotalBytes)",
      "minItems": 1,
      "items": {
        "type": "string",
        "aggregationExpression": true
      }
    },
    "groupbys": {
      "type": "array",
      "title": "Group by fields",
      "description": "Fields to group aggregates by. Supports wildcard expressions. Warning: Using wildcard '*' causes all fields in the event to be included, which can result in high cardinality and increased memory usage. Exclude fields that can result in high cardinality before using wildcards. Example: !_time, !_numericValue, *",
      "items": {
        "type": "string"
      }
    },
    "flushEventLimit": {
      "type": "number",
      "title": "Aggregation event limit",
      "description": "The maximum number of events to include in any given aggregation event.",
      "minimum": 1
    },
    "flushMemLimit": {
      "type": "string",
      "title": "Aggregation memory limit",
      "description": "The memory usage limit to impose upon aggregations. Defaults to unlimited (all available system memory). Accepts numerals with units like KB, MB, etc. (e.g.: 4GB.)",
      "pattern": "^\\d+\\s*(?:\\w{2})?$"
    },
    "cumulative": {
      "type": "boolean",
      "title": "Cumulative aggregations",
      "description": "Determines if the aggregations should be reset to 0 or retained for cumulative aggregations when flushing out an aggregation table event.",
      "default": false
    },
    "searchAggMode": {
      "type": "string",
      "title": "Search-specific aggregation mode",
      "description": "Allows Cribl Search specific aggregation configuration"
    },
    "add": {
      "title": "Evaluate Fields",
      "description": "Set of key-value pairs to evaluate and add/set",
      "type": "array",
      "items": {
        "type": "object",
        "required": ["value"],
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Field name"
          },
          "value": {
            "type": "string",
            "title": "Value expression",
            "description": "JavaScript expression to compute the value (can be constant)",
            "jsExpression": true
          }
        }
      }
    },
    "flushOnInputClose": {
      "type": "boolean",
      "title": "Flush on stream close",
      "description": "Determines if aggregations should flush when an input stream is closed. If disabled, time window settings will control flush behavior.",
      "default": true
    }
  },
  "dependencies": {
    "cumulative": {
      "oneOf": [
        {
          "properties": {
            "cumulative": {
              "enum": [true]
            }
          }
        },
        {
          "properties": {
            "cumulative": {
              "enum": [false]
            },
            "lagTolerance": {
              "type": "string",
              "title": "Lag tolerance",
              "description": "The lag tolerance represents the tumbling window tolerance to late events. Must be a valid time string (e.g., 10s).",
              "pattern": "\\d+[sm]$"
            },
            "idleTimeLimit": {
              "type": "string",
              "title": "Idle bucket time limit",
              "description": "The amount of time to wait before flushing a bucket that has not received events. Must be a valid time string (e.g., 10s).",
              "pattern": "\\d+[sm]$"
            }
          }
        }]
      }
    }
  }
