output: default
streamtags: []
groups: {}
asyncFuncTimeout: 1000
functions:
  - id: comment
    filter: "true"
    disabled: null
    conf:
      comment: "IMPORTANT:  Select the three grey bars ||| top left and enable the
        Description option"
  - id: eval
    filter: "true"
    disabled: false
    conf:
      add:
        - disabled: false
          name: _raw
          value: _raw.replace(/\n\s+/gm,'\n')
        - disabled: false
          name: _raw
          value: _raw.replace(/\t/gm,'')
        - disabled: false
          name: _raw
          value: _raw.replace(/, /gm,',')
        - name: _raw
          value: C.Text.parseWinEvent(_raw,[])
          disabled: false
      remove: []
    description: Parse _raw XML to a JSON & remove fields with values in brackets
    final: false
  - id: flatten
    filter: "true"
    disabled: false
    conf:
      fields:
        - _raw
      prefix: ""
      depth: 5
      delimiter: _
    description: Flatten fields to top level
    final: false
  - id: rename
    filter: "true"
    disabled: false
    conf:
      wildcardDepth: 5
      renameExpr: name.replace(/_raw_.+_/,'')
      rename: []
    final: false
    description: Rename expression
  - id: auto_timestamp
    filter: "true"
    disabled: false
    conf:
      srcField: SystemTime
      dstField: _time
      defaultTimezone: local
      timeExpression: time.getTime() / 1000
      offset: 0
      maxLen: 150
      defaultTime: now
      latestDateAllowed: +1week
      earliestDateAllowed: -420weeks
    final: false
    description: Set time from SystemTime
  - id: mask
    filter: Guid || Name || ProcessID || SystemTime || ThreadID
    disabled: false
    conf:
      rules:
        - disabled: false
          matchRegex: /(.+)/
          replaceExpr: "`'${g1}'`"
      fields:
        - Guid
        - Name
        - ProcessID
        - SystemTime
        - ThreadID
      depth: 5
    final: false
    description: Surround certain fields with quotes
  - id: regex_extract
    filter: TokenElevationType
    disabled: null
    conf:
      source: TokenElevationType
      iterations: 100
      overwrite: false
      regex: /(?<Token_Elevation_Type_id>\d+)/
    final: false
    description: Pull only digits from TokenElevationType
  - id: serialize
    filter: "true"
    disabled: false
    conf:
      type: json
      dstField: _raw
      fields:
        - "!_*"
        - "!cribl_*"
        - "!index"
        - "!source"
        - "!sourcetype"
        - "!host"
        - "!punct"
        - "!time*pos*"
        - "!before*"
        - "!date_*"
        - "*"
      cleanFields: false
    description: Serialize fields into _raw
    final: false
  - id: eval
    filter: "true"
    disabled: false
    conf:
      keep:
        - _*
        - cribl_*
        - index
        - source
        - sourcetype
        - host
        - hf*
        - punct
        - date_*
        - Caller*
        - Creator*
        - Target*
        - Logon*
        - Subject*
        - Client*
        - Parent*
      remove:
        - "*"
    description: Keep only the following fields at top level, and use next Code
      function to remove duplicates
  - id: code
    filter: "true"
    disabled: false
    conf:
      maxNumOfIterations: 5000
      activeLogSampleRate: 1
      useUniqueLogChannel: false
      code: >-
        // Try to parse the value stored in __e._raw as JSON and assign it to
        the 'raw' variable.

        try {
          var raw = JSON.parse(__e._raw);

          // Iterate over each key-value pair in the __e object.
          for (let [key, value] of Object.entries(__e)) {
            // Check if the key does not start with an underscore (_) and the corresponding property exists in the 'raw' object.
            if (!key.startsWith('_') && raw[key]) {
              // Set the value of the property to undefined, effectively removing it from 'raw'.
              raw[key] = undefined;
            }
          }

          // Convert the 'raw' object back to a JSON string and update the __e['_raw'] with the new value.
          __e['_raw'] = JSON.stringify(raw);
        } catch (error) {
          // If an error occurs during the process, catch it and save the error message as a string in __e['cribl_code_error'].
          __e['cribl_code_error'] = String(error);
        }
    description: Remove any duplicate keys that exist in _raw when they are also in
      top level fields.
  - id: eval
    filter: sourcetype.startsWith('XmlWinEventLog:')
    disabled: false
    conf:
      add:
        - disabled: false
          name: sourcetype
          value: "'XmlWinEventLog'"
    description: Adjust sourcetype to ensure the Windows TA works properly.
