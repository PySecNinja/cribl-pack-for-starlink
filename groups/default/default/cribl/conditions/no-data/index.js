exports.name="No Data Received";exports.type="metric";exports.category="sources";let id;let name;let __workerGroup;let timeWindow;let notifyOnResolution;exports.init=e=>{id=e.pid;const t=e.conf||{};({name,__workerGroup,timeWindow,notifyOnResolution}=t);timeWindow=timeWindow||"60s";notifyOnResolution=notifyOnResolution||false};exports.build=()=>{let e=`(_metric === 'total.in_bytes' || _metric === 'health.inputs') && input === '${name}'`;let t=`'Source ${name} had no traffic for ${timeWindow}'`;let i=`'Source ${name} has started receiving traffic for ${timeWindow}'`;if(__workerGroup){e=`(${e}) && __worker_group === '${__workerGroup}'`;t=`'Source ${name} in group ${__workerGroup} had no traffic for ${timeWindow}'`;i=`'Source ${name} in group ${__workerGroup} has started receiving traffic for ${timeWindow}'`}return{filter:e,pipeline:{conf:{functions:[{id:"aggregation",conf:{timeWindow,aggregations:["sum(_value).where(_metric==='total.in_bytes').as(bytes)","perc(95, _value).where(_metric==='health.inputs').as(health)"],lagTolerance:"20s",idleTimeLimit:"20s"}},{id:"eval",conf:{add:[{name:"input",value:`'${name}'`},{name:"_metric",value:`'total.in_bytes'`},{name:"timewindow",value:`'${timeWindow}'`}]}},{id:"eval",filter:"(typeof bytes === 'undefined' || bytes === 0)",conf:{add:[{name:"_raw",value:`${t}`},{name:"status",value:`'ALARM'`}]}},{id:"eval",filter:"bytes > 0",conf:{add:[{name:"_raw",value:`${i}`},{name:"status",value:`'OK'`}]}},{id:"notifications",conf:{id,field:"status",deduplicate:notifyOnResolution}},{id:"drop",filter:`!(${notifyOnResolution}) && status === 'OK'`}]}}}};