exports.name="Office 365 Service Communications";exports.version="0.1";exports.disabled=false;exports.hidden=true;exports.destroyable=false;const{httpSearch,isHttp200,RestVerb,HttpError,wrapExpr,DEFAULT_TIMEOUT_SECS}=C.internal.HttpUtils;let contentType;let tenantId;let appId;let clientSecret;let contentUrl;let exprArgs={};let earliest;let timeout;let authUrl;let retryRules;const CONTENT_CURRENT="CurrentStatus";const CONTENT_MESSAGES="Messages";exports.init=t=>{const e=t.conf;tenantId=e.tenant_id;appId=e.app_id;planType=e.plan_type;clientSecret=e.client_secret;contentType=e.content_type;if(![CONTENT_CURRENT,CONTENT_MESSAGES].includes(contentType)){throw new Error(`Invalid contentType: ${e.content_type}`)}exprArgs={tenantId,appId,clientSecret,contentType,planType};const r=["tenantId","appId","clientSecret"].filter((t=>!exprArgs[t]));if(r.length){throw new Error(`Invalid configuration missing: ${r}`)}const n=planType==="gcc_high"?"us":"com";if(contentType===CONTENT_CURRENT){contentUrl=`https://graph.microsoft.${n}/v1.0/admin/serviceAnnouncement/healthOverviews`}else if(contentType===CONTENT_MESSAGES){contentUrl=`https://graph.microsoft.${n}/v1.0/admin/serviceAnnouncement/messages`}authUrl=`https://login.microsoftonline.${n}/\${tenantId}/oauth2/token`;earliest=e.earliest?new Date(e.earliest*1e3):undefined;timeout=e.timeout!=null&&+e.timeout>=0?+e.timeout:DEFAULT_TIMEOUT_SECS*1e3;retryRules=e.retryRules};function getCollectParams(){const t={};if(earliest&&contentType===CONTENT_MESSAGES){t["$filter"]=wrapExpr(`lastModifiedDateTime ge ${earliest.toISOString()}`)}return t}exports.discover=async t=>{await t.addResult({source:contentUrl,format:"raw"})};exports.collect=async(t,e)=>{const r={client_id:wrapExpr(exprArgs.appId),resource:"'https://graph.microsoft.com'",client_secret:wrapExpr(exprArgs.clientSecret),grant_type:"'client_credentials'"};const n={url:authUrl,method:RestVerb.POST,params:r,exprArgs,timeout,retryRules};const o=await(await httpSearch(n,e.logger())).extractResult("access_token");const s=getCollectParams();const a={url:t.source,params:s,method:RestVerb.GET,headers:{Authorization:wrapExpr(`Bearer ${o}`)},timeout,retryRules};const c=await httpSearch(a,e.logger());c.res.on("end",(()=>{if(!isHttp200(c.res.statusCode)){const t=new HttpError("Office365 collect error",c.res.statusCode,{host:c.host,port:c.port,path:c.path,method:c.method});e.reportError(t,"JobFatal").catch((()=>{}))}})).on("error",(t=>{e.reportError(t,"JobFatal").catch((()=>{}))}));return c.stream()};