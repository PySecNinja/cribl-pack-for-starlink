const{NestedPropertyAccessor}=C.expr;const{GeoIpDatabase}=C.internal.Lookup;exports.name="GeoIP";exports.version="0.2";exports.disabled=false;exports.group="Standard";let geoipDb;let processEventFn=undefined;exports.init=e=>{geoipDb=undefined;const{file:o}=e.conf;return Promise.resolve().then((()=>{if(e.conf.outFieldMappings!=null&&Object.keys(e.conf.outFieldMappings).length>0){const o=new NestedPropertyAccessor(e.conf.inField||"ip");const t=Object.keys(e.conf.outFieldMappings).map((o=>({geoipSource:new NestedPropertyAccessor(e.conf.outFieldMappings[o]),eventTarget:new NestedPropertyAccessor(o)})));processEventFn=async e=>{const n=o.evalOn(e);if(n){const o=geoipDb.get(n);if(o){for(const n of t){n.eventTarget.set(e,n.geoipSource.get(o))}}}return e}}else{const o=[new NestedPropertyAccessor(e.conf.inField||"ip")];const t=[new NestedPropertyAccessor(e.conf.outField||"geoip")];const n=e.conf.additionalFields||[];for(let e=0;e<n.length;e++){const s=n[e];const r=s.extraInField;const c=s.extraOutField;if(r&&c){o.push(new NestedPropertyAccessor(r));t.push(new NestedPropertyAccessor(c))}}processEventFn=async e=>{for(let n=0;n<o.length;n++){const s=o[n].evalOn(e);if(s)t[n].set(e,geoipDb.get(s))}return e}}const t=GeoIpDatabase.open(o);return t.ready().then((()=>{geoipDb=t}))}))};exports.process=e=>{if(!geoipDb)return e;return geoipDb.ready().then((()=>processEventFn(e)))};exports.unload=()=>{geoipDb&&geoipDb.close();geoipDb=undefined;processEventFn=undefined};