exports.name="mv_expand";exports.version="0.1";exports.handleSignals=false;exports.group=C.INTERNAL_FUNCTION_GROUP;exports.sync=true;const{NestedPropertyAccessor}=C.expr;const cLogger=C.util.getLogger("func:mv_expand");let sourceFields;let targetNames;let rowLimit;let itemIndexName;let arrayBagMode;exports.init=e=>{const r=e?.conf;let t=false;sourceFields=[];targetNames=[];if(!r){throw new Error("Multi-value Expand not supported w/o configuration")}if(!r.sourceFields){throw new Error("sourceFields missing on multi-value expand configuration")}if(!Array.isArray(r.sourceFields)||!r.sourceFields.length){throw new Error("Expected array of property names on sourceFields configuration")}if(r.targetNames){if(!Array.isArray(r.targetNames)||r.targetNames.length!==r.sourceFields.length){throw new Error(`targetNames configuration isn't matching the number of sourceFields entries`)}t=true;for(const e of r.targetNames){targetNames.push(new NestedPropertyAccessor(e,cLogger))}}for(const e of r.sourceFields){const r=new NestedPropertyAccessor(e,cLogger);sourceFields.push(r);if(!t){targetNames.push(r)}}if(r.rowLimit==null){rowLimit=Number.MAX_SAFE_INTEGER}else{rowLimit=r.rowLimit;if(rowLimit<1||rowLimit>Number.MAX_SAFE_INTEGER||Math.floor(rowLimit)!==rowLimit){throw new Error("invalid value for rowLimit in mv-expand configuration")}}if(r.itemIndexName){itemIndexName=new NestedPropertyAccessor(r.itemIndexName,cLogger)}arrayBagMode=r.bagExpansionMode==="array"};exports.unload=()=>{sourceFields=undefined;targetNames=undefined;itemIndexName=undefined};exports.process=e=>{let r=[e];for(let e=0;e<sourceFields.length;++e){const t=sourceFields[e];const o=targetNames[e];const s=[];for(const e of r){const r=t.get(e);if(r!=null){if(Array.isArray(r)){for(let t=0;t<r.length;++t){const i=r[t];const n=e.__clone(true);o.set(n,i);s.push(n)}}else if(typeof r==="object"){const t=Object.entries(r);for(let r=0;r<t.length;++r){const i=t[r];const n=e.__clone(true);if(arrayBagMode){o.set(n,i)}else{const e={};e[i[0]]=i[1];o.set(n,e)}s.push(n)}}else{s.push(e)}}else{s.push(e)}}if(s.length>=rowLimit){r=s.slice(0,rowLimit);break}else{r=s}}if(itemIndexName){for(let e=0;e<r.length;++e){itemIndexName.set(r[e],e)}}return r};