exports.name="notify";exports.version="0.0.3";exports.disabled=false;exports.handleSignals=true;exports.group=C.INTERNAL_FUNCTION_GROUP;let group,searchId,savedQueryId,notificationId,message,messageTemplate,authToken,messagesEndpoint,searchUrl,logger,comparatorExpression,trigger="true",triggerCount=0,triggerExpression,resultsLimit=10,attachmentResultsLimit=5e4,triggerCounter=0,triggerType="resultsCount",triggerComparator=">",targetConfig,notificationResults=[],notificationSent=false,signalCounter=0,utLogger=undefined,tenantId=undefined,shouldBuildAttachment=false,attachment=null,attachmentDir,attachmentFile="",emailAttachmentBuilder=null,attachmentType;const{RestVerb}=C.internal.HttpUtils;const{createRequest}=C.internal.kusto;const createNotification=(t,e,i,r,n,a,s,o,g)=>{const c={id:`SEARCH_NOTIFICATION_${e}_${t}`,severity:"info",_raw:i,title:`Scheduled search notification`,_time:t,now:t,group,searchId:n,savedQueryId:a,searchResultsUrl:s,notificationId:e,tenantId:o,message:i,__attachments:g?[g]:[],origin_metadata:{itemType:"link",id:n,type:"search",product:"search",groupId:""}};if(targetConfig?.conf?.includeResults??false){c.resultSet=r}return c};const comparators=[">","<","===","!==",">=","<="];exports.init=async t=>{trigger="true";triggerCount=0;triggerExpression;resultsLimit=10;attachmentResultsLimit=5e4;triggerCounter=0;triggerType="resultsCount";triggerComparator=">";notificationResults=[];const e=t.conf;({searchId,message,savedQueryId,authToken,messagesEndpoint,searchUrl,utLogger,notificationId,tenantId,targetConfig,attachmentDir}=e);logger=utLogger??C.util.getLogger(`func:notify:${searchId}`);messageTemplate=new C.internal.kusto.Template(message,false,logger);group=e.group??group;trigger=e.trigger??trigger;triggerExpression=new C.expr.Expression(trigger);resultsLimit=e.resultsLimit??resultsLimit;attachmentResultsLimit=e.attachmentResultsLimit??attachmentResultsLimit;triggerCount=e.triggerCount??triggerCount;triggerType=e.triggerType??triggerType;triggerComparator=e.triggerComparator??triggerComparator;attachmentType=targetConfig?.conf?.attachmentType;const i=20*1024*1024;shouldBuildAttachment=targetConfig?.conf?.includeResults&&(attachmentType==="csv"||attachmentType==="json");if(shouldBuildAttachment){emailAttachmentBuilder=new C.internal.emailAttachmentBuilder(attachmentDir,attachmentType,notificationId,i);await emailAttachmentBuilder.init();attachmentFile=emailAttachmentBuilder.getAttachmentPath()}if(!comparators.includes(triggerComparator)){throw new Error(`Unknown comparator ${triggerComparator}`)}comparatorExpression=new C.expr.Expression(`triggerCounter ${triggerComparator} triggerCount`);logger.info("Initialized notify",{...e})};exports.process=async t=>{if(t.__signalEvent__==="final"&&!notificationSent){if(comparatorExpression.evalOn({triggerCounter,triggerCount})){if(shouldBuildAttachment){await emailAttachmentBuilder.end();await sendNotification(notificationResults,attachmentFile)}else{await sendNotification(notificationResults)}}}if(t.__signalEvent__==="reset"){signalCounter++;if(signalCounter>1)logger.error("Signal event received in notify pipeline function, which cannot handle previews",{signalCounter})}if(t.__signalEvent__!=null||triggerType==="custom"&&!triggerExpression.evalOn(t))return t;triggerCounter++;if(notificationResults.length<resultsLimit){notificationResults.push(t.asObject())}if(shouldBuildAttachment&&notificationResults.length<attachmentResultsLimit&&!emailAttachmentBuilder.attachmentCapped){await emailAttachmentBuilder.write(t)}return t};async function sendNotification(t,e=null){notificationSent=true;const i=new Date;const r=messageTemplate.render({resultSet:t,savedQueryId,searchId,searchResultsUrl:searchUrl,notificationId,timestamp:i.toISOString(),tenantId});if(e){attachment=emailAttachmentBuilder.getAttachmentDetails()}const n=createNotification(i.getTime(),notificationId,r,t,searchId,savedQueryId,searchUrl,tenantId,attachment);await sendNotificationMessage(n)}async function sendNotificationMessage(t){const e=3;const i=1e3;const r=process.env.NODE_ENV!=="dev";for(let n=0;n<=e;n++){try{logger.debug("Sending message",{notiMessage:t});const e={url:messagesEndpoint,method:RestVerb.POST,payload:t,rejectUnauthorized:r};const i=await createRequest(e).addAuthToken(authToken).run();await i.readAsJSON();return}catch(t){logger.error("Error posting notification message",{error:t});logger.error("Sending attempt failed.");if(n<e){logger.info(`Retrying... Attempt ${n+1} of ${e}`);await new Promise((t=>setTimeout(t,i)))}else{throw new Error(`Failed to send bulletin message after ${e} attempts`)}}}}exports.unload=()=>{messageTemplate?.dispose();triggerExpression=undefined;notificationResults=undefined};