exports.name="Mask";exports.version="0.5";exports.group="Standard";exports.sync=true;const{Expression,NestedPropertyAccessor}=C.expr;const{NamedGroupRegExp}=C.util;const cLogger=C.util.getLogger("func:mask");const CTRL_PREFIX="_ctrl.";function getAccessor(e){if(e){return new NestedPropertyAccessor(e)}return e}let rules=[];let singleSimpleField=undefined;let flags=[];let nonInternalWCL=undefined;let internalFields=[];let depth;const DEFAULT_DEPTH=5;exports.init=e=>{const n=e.conf||{};rules=[];flags=[];depth=n.depth&&n.depth>0?n.depth:DEFAULT_DEPTH;rules=(n.rules||[]).map((e=>{if(e.disabled)return undefined;const n=new NamedGroupRegExp(e.matchRegex);const t=new Expression(`${e.replaceExpr}`,{disallowAssign:true});return{regex:n,expression:t}})).filter((e=>e!=null));const t=(n.fields||[]).map((e=>e.trim())).filter((e=>e.length>0));nonInternalWCL=undefined;singleSimpleField=undefined;internalFields=[];const l=[];t.forEach((e=>{if(e.startsWith("__")){if(e.indexOf("*")>-1){cLogger.warn("Internal fields with wildcards are not supported, ignoring field",{field:e})}else{internalFields.push(e)}}else{l.push(e)}}));if(t.length===1&&t[0].indexOf("*")===-1&&t[0].indexOf(".")===-1&&t[0].indexOf("!")===-1){singleSimpleField=t[0]}if(l.length>0){nonInternalWCL=new C.util.WildcardList(l)}(n.flags||[]).forEach((e=>{e.name=(e.name||"").trim();const n=e.name.startsWith(CTRL_PREFIX);flags.push(n);flags.push(n?e.name.substr(CTRL_PREFIX.length):getAccessor(e.name));flags.push(new Expression(`${e.value}`,{disallowAssign:true}))}))};function execRules(e,n,t){if(e===undefined||e===null||typeof e==="object"){return e}e=e.toString();for(let l=0;l<rules.length;l++){const{regex:r,expression:s}=rules[l];e=e.replace(r.getRegExp(),((...e)=>{const l={g0:e[0],event:n};for(let n=1,t=e.length-2;n<t;n++){l[`g${n}`]=e[n]}let r=s.evalOn(l);r=r===undefined?e[0]:r;if(r)t[0]=true;return r}))}return e}function doFlag(e){for(let n=2;n<flags.length;n+=3){const t=flags[n-1];const l=flags[n].evalOn(e);if(!flags[n-2]){if(t)t.set(e,l)}else{e.__setCtrlField(t,l)}}}function traverseInternal(e){for(let n=0;n<internalFields.length;n++){if(internalFields[n].startsWith(e)){return true}}return false}exports.process=e=>{if(!e||nonInternalWCL==null&&internalFields.length===0||rules.length===0){return e}const n=[false];if(singleSimpleField!=null){e[singleSimpleField]=execRules(e[singleSimpleField],e,n);if(n[0])doFlag(e);return e}e.__traverseAndUpdateWithInternalFields(depth,false,((t,l)=>{if(e.__isInternalField(t)){if(internalFields.length===0||!traverseInternal(t))return null;if(internalFields.indexOf(t)===-1)return l}else{if(nonInternalWCL==null||!nonInternalWCL.test(t)){return l}}return execRules(l,e,n)}));if(n[0])doFlag(e);return e};exports.UT_getNumRules=()=>(rules||[]).length;