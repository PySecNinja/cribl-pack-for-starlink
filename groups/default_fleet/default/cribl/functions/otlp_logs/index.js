exports.name="OTLP Logs";exports.version="0.1";exports.disabled=false;exports.group="Formatters";exports.sync=true;exports.handleSignals=true;const cLogger=C.util.getLogger("func:otlp_logs");const{OTelLogsFormatter}=C.internal.otel;const statsInterval=6e4;let otelLogsFormatterConfig={};let otlpBatchConfig={};let logsFormatter;let statsReportInterval;function resetStats(){logsFormatter?.resetStats()}function reportStats(){const{numReceived:t,numNotLogs:e,numDropped:o,numBatches:a}=logsFormatter.getStats();cLogger.debug("OTLP Logs events stats",{numReceived:t,numNotLogs:e,numDropped:o,numBatches:a});resetStats()}exports.init=t=>{const e=(t||{}).conf||{};otelLogsFormatterConfig={shouldDropNonLogEvents:e.dropNonLogEvents||false};otlpBatchConfig={enableOTLPMetricsBatching:e.batchOTLPLogs,sendBatchSize:e.sendBatchSize??8192,timeout:e.timeout??200,sendBatchMaxSize:C.util.parseMemoryStringToBytes(`${e.sendBatchMaxSize??0}KB`),metadataKeys:e.metadataKeys??[],metadataCardinalityLimit:e.metadataCardinalityLimit??1e3};if(otlpBatchConfig.metadataKeys.length>0&&otlpBatchConfig.metadataCardinalityLimit===0){cLogger.warn("Can't have unlimited cardinality, setting cardinality to 1000");otlpBatchConfig.metadataCardinalityLimit=1e3}logsFormatter=new OTelLogsFormatter(cLogger,otelLogsFormatterConfig,otlpBatchConfig);resetStats();clearInterval(statsReportInterval);statsReportInterval=setInterval(reportStats,statsInterval)};exports.process=t=>{let e=[];if(t.__signalEvent__){if(otlpBatchConfig.enableOTLPMetricsBatching){e=logsFormatter.output(t.__signalEvent__==="final")}e.push(t)}else{e=logsFormatter.handleEvent(t)}return e.length===0?null:e.length===1?e[0]:e};exports.unload=()=>{logsFormatter=undefined;clearInterval(statsReportInterval);statsReportInterval=undefined};exports.UT_getFormatter=()=>logsFormatter;exports.UT_getStats=()=>{const{numReceived:t,numNotLogs:e,numDropped:o,numBatches:a}=logsFormatter.getStats();return{numReceived:t,numNotLogs:e,numDropped:o,numBatches:a}};