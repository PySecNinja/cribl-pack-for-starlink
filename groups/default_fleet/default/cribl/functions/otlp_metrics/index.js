exports.name="OTLP Metrics";exports.version="0.4";exports.disabled=false;exports.group="Formatters";exports.sync=true;exports.handleSignals=true;const cLogger=C.util.getLogger("func:otlp_metrics");const{OtelMetricsFormatter}=C.internal.otel;const statsInterval=6e4;let otelMetricsFormatterConfig={};let otlpBatchConfig={};let metricsFormatter;let statsReportInterval;function resetStats(){metricsFormatter?.resetStats()}function reportStats(){const{numGaugeHistogram:t,numHistogramNoCount:e,numSummaryNoCount:r,numDropped:a,numNotMetric:o,numBatches:n}=metricsFormatter.getStats();cLogger.debug("OTLP Metrics events stats",{numGaugeHistogram:t,numHistogramNoCount:e,numSummaryNoCount:r,numNotMetric:o,numDropped:a,numBatches:n});resetStats()}exports.init=t=>{const e=(t||{}).conf||{};otelMetricsFormatterConfig={shouldDropNonMetricEvents:e.dropNonMetricEvents||false,resourceAttributePrefixes:e.resourceAttributePrefixes,otlpVersion:e.otlpVersion};otlpBatchConfig={enableOTLPMetricsBatching:e.batchOTLPMetrics,sendBatchSize:e.sendBatchSize??8192,timeout:e.timeout??200,sendBatchMaxSize:C.util.parseMemoryStringToBytes(`${e.sendBatchMaxSize??0}KB`),metadataKeys:e.metadataKeys??[],metadataCardinalityLimit:e.metadataCardinalityLimit??1e3};if(otlpBatchConfig.metadataKeys.length>0&&otlpBatchConfig.metadataCardinalityLimit===0){cLogger.warn("Can't have unlimited cardinality, setting cardinality to 1000");otlpBatchConfig.metadataCardinalityLimit=1e3}metricsFormatter=new OtelMetricsFormatter(cLogger,otelMetricsFormatterConfig,otlpBatchConfig);resetStats();clearInterval(statsReportInterval);statsReportInterval=setInterval(reportStats,statsInterval)};exports.process=t=>{let e=[];if(t.__signalEvent__){if(otlpBatchConfig.enableOTLPMetricsBatching){e=metricsFormatter.output(t.__signalEvent__==="final")}e.push(t)}else{e=metricsFormatter.handleEvent(t)}return e.length===0?null:e.length===1?e[0]:e};exports.unload=()=>{metricsFormatter=undefined;clearInterval(statsReportInterval);statsReportInterval=undefined};exports.UT_getStats=()=>{const{numGaugeHistogram:t,numHistogramNoCount:e,numSummaryNoCount:r,numDropped:a,numNotMetric:o,numBatches:n}=metricsFormatter.getStats();return{numGaugeHistogram:t,numHistogramNoCount:e,numSummaryNoCount:r,numDropped:a,numNotMetric:o,numBatches:n}};