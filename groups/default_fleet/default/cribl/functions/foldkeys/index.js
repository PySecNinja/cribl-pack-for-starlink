exports.name="FoldKeys";exports.version="0.1";exports.handleSignals=false;exports.group=C.INTERNAL_FUNCTION_GROUP;exports.sync=true;let deleteOriginal;let separator;let selectionRegExp;exports.init=e=>{const t=e?.conf||{};deleteOriginal=t.deleteOriginal??true;separator=t.separator??".";if(t.selectionRegExp){const e=t.selectionRegExp.match(/\/([^\/]+)\/([gimsuy]*)/);if(e?.length>1){selectionRegExp=new RegExp(e[1],e[2]??"")}else{selectionRegExp=new RegExp(t.selectionRegExp)}}};exports.process=e=>{if(!e)return e;return fold(e)};function fold(e){for(let[t,l]of Object.entries(e)){if(selectionRegExp==null||selectionRegExp.test(t)){const n=t.split(separator);if(n.length>1){let o=e;for(let e=0;e<n.length-1;++e){const t=n[e];let l=o[t];if(l==null){l=Object.create(null);o[t]=l}else if(typeof l!=="object"){l={[`original_${t}`]:l}}o=l}o[n[n.length-1]]=l;if(deleteOriginal)e[t]=undefined}}if(l!=null&&typeof l==="object"){fold(l)}}return e}