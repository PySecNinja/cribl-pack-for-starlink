exports.name="gen_stats";exports.version="0.0.1";exports.disabled=false;exports.handleSignals=true;exports.group=C.INTERNAL_FUNCTION_GROUP;exports.sync=true;let statsMap;let logger;let warned;const createProducer=C.internal.kusto.createStatsProducer;exports.init=()=>{logger=C.util.getLogger(`fn:genStats`);statsMap=new Map;warned=new Set};exports.UT_getMap=()=>statsMap;exports.UT_getLogger=()=>logger;function validateStart(e){if(!e.fileInfo||!e.fileInfo.name)return"Missing fileInfo";if(!e.fields||!e.fields.length)return"Missing fields";if(!e.source||e.source==="")return"Missing source";if(!e.datasetId||e.datasetId==="")return"Missing datasetId"}function objectKey(e,t){return`${e}-${t}`}exports.process=e=>{switch(e.__signalEvent__){case"object_stats":{if(e.type==="start"){const t=validateStart(e);if(t){logger.error("Invalid object_stats/start event",{error:t});return}statsMap.set(objectKey(e.datasetId,e.source),{fileInfo:e.fileInfo,producer:createProducer(e.fields),datasetId:e.datasetId,source:e.source});logger.debug("Collecting stats for",{fileInfo:e.fileInfo,fields:e.fields});return}else if(e.type==="end"){const t=objectKey(e.datasetId,e.source);const s=statsMap.get(t);const r=flushStats(s,e);statsMap.delete(t);logger.debug("Finished collecting stats for",{fileInfo:s.fileInfo});return r}else{logger.warn("Unknown signal type",{event:e});return}}case"final":{const t=createMessageCarrier(e);for(const e of statsMap.values()){t.fileInfos.push(createFileInfoDetail(e.source,e))}statsMap=new Map;const s=[e];if(t.fileInfos.length){s.unshift(t)}return s}case undefined:{const{source:t}=e;const s=statsMap.get(objectKey(e.dataset,t))?.producer;if(!s){if(warned.has(t))return;logger.warn("can't find producer for source, ignoring events",{source:t});warned.add(t);return}s.process(e);return}default:return e}};function createMessageCarrier(e){const t=e.__clone(true,[]);return Object.assign(t,{_messageType:"__control__",_messageSubType:"object_stats",fileInfos:[]})}function flushStats(e,t){const s=createMessageCarrier(t);s.fileInfos.push(createFileInfoDetail(t.source,e));return s}function createFileInfoDetail(e,t){t.fileInfo.splitStats=[t.producer.splitInfo];return{source:e,datasetId:t.datasetId,fileInfo:t.fileInfo}}